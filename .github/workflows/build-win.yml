name: build-macos-app

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  build-arm64:
    runs-on: macos-14   # Apple Silicon runner

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'   # стабильнее для PyQt6/arm64

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-py311-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-py311-pip-

      - name: Install deps (pin PyQt6/Qt6 6.5.x LTS)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Пины, проверенные на macOS ARM
          pip install "pyinstaller>=6.6,<7" \
                      "PyQt6==6.5.3" "PyQt6-Qt6==6.5.3" "PyQt6-sip>=13" \
                      pandas numpy matplotlib packaging
          pip freeze

      - name: Create runtime hook (Qt safe layer)
        run: |
          mkdir -p hooks
          cat > hooks/qt_macos_layer.py << 'PY'
          import os
          # Устраняет падения рендера на части конфигураций macOS/ARM
          os.environ.setdefault("QT_MAC_WANTS_LAYER", "1")
          PY

      - name: Build GUI (.app, clean)
        run: |
          set -e
          pyinstaller \
            --noconfirm --clean --windowed --onedir \
            --name ReviewAnalytics \
            --collect-submodules PyQt6 \
            --collect-all pandas \
            --collect-all numpy \
            --collect-data matplotlib \
            --hidden-import PyQt6.QtCore \
            --hidden-import PyQt6.QtGui \
            --hidden-import PyQt6.QtWidgets \
            --hidden-import matplotlib.backends.backend_qtagg \
            --exclude-module PyQt6.QtBluetooth \
            --runtime-hook hooks/qt_macos_layer.py \
            --add-data "Csv:Csv" \
            --add-data "Lexicons:Lexicons" \
            --add-data "Urls:Urls" \
            --add-data "DataAnalytics:DataAnalytics" \
            Interface/interface.py
          file "dist/ReviewAnalytics.app/Contents/MacOS/ReviewAnalytics"
          uname -m

      - name: Prepare bundle tree (parsers/data/drivers)
        run: |
          OUT="dist/ReviewAnalytics-bundle-arm64"
          mkdir -p "$OUT/Parsers/Incremental" "$OUT/Csv/Reviews/NewReviews" "$OUT/Csv/Summary/NewSummary" "$OUT/DataAnalytics" "$OUT/drivers/MacOS"
          cp -R Parsers/*.py "$OUT/Parsers/" 2>/dev/null || true
          cp -R Parsers/Incremental/*.py "$OUT/Parsers/Incremental/" 2>/dev/null || true
          cp -R Csv/Reviews/merged_reviews.py "$OUT/Csv/Reviews/" 2>/dev/null || true
          cp -R Csv/Reviews/NewReviews/merged_new_reviews.py "$OUT/Csv/Reviews/NewReviews/" 2>/dev/null || true
          cp -R Csv/Summary/merged_summary.py "$OUT/Csv/Summary/" 2>/dev/null || true
          cp -R Csv/Summary/NewSummary/merged_new_summary.py "$OUT/Csv/Summary/NewSummary/" 2>/dev/null || true
          cp -R DataAnalytics/add_sentiment.py "$OUT/DataAnalytics/" 2>/dev/null || true
          [ -d Urls ] && cp -R Urls "$OUT/Urls"
          [ -d Lexicons ] && cp -R Lexicons "$OUT/Lexicons"
          if [ -d Drivers/MacOS ]; then
            cp -R Drivers/MacOS/* "$OUT/drivers/MacOS/"
            chmod +x "$OUT"/drivers/MacOS/* || true
          fi
          # Снимем карантин в артефакте (удобно для локального запуска)
          xattr -dr com.apple.quarantine dist/ReviewAnalytics.app || true

      - name: Ad-hoc codesign (optional)
        run: |
          codesign --force --deep --sign - "dist/ReviewAnalytics.app" || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ReviewAnalytics-macOS-arm64
          path: |
            dist/ReviewAnalytics.app
            dist/ReviewAnalytics-bundle-arm64/**
